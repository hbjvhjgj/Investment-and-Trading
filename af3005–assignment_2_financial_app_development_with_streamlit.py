# -*- coding: utf-8 -*-
"""AF3005–Assignment_2_Financial_App_Development_with_Streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PsIk1bDGg0t11W3sxHRMnR0x0vcrReE2

# **AF3005 – Programming for Finance**  

---

## **📘 Assignment 2: Financial App Development with Streamlit**  

📍 **FAST National University of Computer and Emerging Sciences (FAST-NUCES), Islamabad**  
👨‍🏫 **Instructor:** Dr. Usama Arshad (Assistant Professor, FSM)  
🎓 **Program:** BS Financial Technology (BSFT)  
📅 **Semester:** Spring 2025  
📌 **Sections:** BSFT06A, BSFT06B, BSFT06C  

---

## **🎯 Course Learning Outcomes (CLOs)**
- **CLO3:** Develop financial models and algorithms for decision-making. (PLO 3, PLO 5)
- **CLO4:** Automate financial processes and calculations using Python programming. (PLO 4, PLO 5)
- **CLO5:** Visualize and interpret financial data effectively using Python tools. (PLO 1, PLO 3)


---

# **🟢 Assignment 2: Financial App Development [20 marks]**

---


## **📍 Task Description**
Students will build a **unique, useful, or practical financial web app** using **Streamlit** and deploy it on **Streamlit Share**. The app must be interactive and handle **financial data**, but **no AI integration of anykind is required**. You can use any publically available financial data or use your own.

---

## **📍 Requirements**
### **1️⃣ Creativity & Uniqueness** 🧠 (3 Marks)  
   - The idea must be **unique, practical, or useful** in the financial domain.

### **2️⃣ App Development with Streamlit** 🖥️ (8 Marks)  
   - Use **Streamlit** to create an interactive financial app.
   - The app should have:
     - A **clear purpose** related to finance.
     - **User input options** (sliders, dropdowns, forms, etc.).
     - **Financial data visualization** (graphs, charts, tables).

### **3️⃣ Deployment on Streamlit Share** 🌍 (3 Marks)  
   - The app must be **hosted on Streamlit Cloud** and accessible via a public link.

### **4️⃣ GitHub Repository & Documentation** 📂 (3 Marks)  
   - Upload the **complete project on GitHub**.
   - **README.md file must include:**
     - **Course Name:** AF3005 – Programming for Finance  
     - **Instructor Name:** Dr. Usama Arshad  
     - **App Overview** (What does the app do?)  
     - **Installation Guide** (How to run it locally?)  
     - **Deployment Link** (Streamlit app URL)  
     - **Screenshots or a small video demo**  
     - **GitHub Repository Link**  

### **5️⃣ LinkedIn Post** 🔗 (3 Marks)  
   - Each student must post about their project on **LinkedIn** with:
     - **Project Description**
     - **GitHub Repository Link**
     - **Streamlit App Link**
     - **Course Name & Instructor Name**
     - **A Small Video Showing How the App Works**
   - Tag **Dr. Usama Arshad** and use relevant hashtags:  
     `#FinTech #ProgrammingForFinance #Python #Streamlit #FinanceApps`

---

## **📍 Evaluation Criteria (Total: 20 Marks)**
| Component                     | Marks |
|--------------------------------|-------|
| Creativity & Novelty          | 3     |
| Proper App Functionality      | 8     |
| Deployment on Streamlit       | 3     |
| GitHub Repository & README    | 3     |
| LinkedIn Post with Links & Video | 3     |
| **Total**                     | **20** |

---

## **📍 Ideas for Financial Apps**
Students can choose their own ideas, but here are some suggestions:
- **Budget Tracker** 💰 (Track income & expenses)
- **Stock Market Dashboard** 📈 (Real-time stock data visualization)
- **Cryptocurrency Portfolio Tracker** 🪙
- **Loan Calculator** 💳 (EMI calculation with interactive sliders)
- **Savings Goal Planner** 🎯
- **Investment Portfolio Analyzer** 📊
- **Forex Exchange Rate Tracker** 💹
- **Personal Finance Quiz App** 🧠 (Interactive quizzes on financial literacy)
- **Tax Estimator** 🏦 (Estimate yearly tax based on user input)

---

## **📍 Submission Guidelines**
1. **GitHub Repository:**  
   - Upload all code files, `requirements.txt`, and a proper `README.md`.  
   - Include **Course Name, Instructor Name, App Overview, Deployment Link, and a Demo Video**.  
   - **Share the repository link.**

2. **Streamlit Share Deployment:**  
   - Share the deployed app link.

3. **LinkedIn Post:**  
   - Post about your app on LinkedIn with:
     - **Project Description**
     - **GitHub Link**
     - **Streamlit App Link**
     - **Demo Video**
     - **Instructor Tag & Hashtags**

4. **Submission Form:**  
   - Submit **GitHub link, Streamlit link, and LinkedIn post link** in the designated form.

---
"""


import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import numpy as np

def get_stock_price(symbol):
    stock = yf.Ticker(symbol)
    data = stock.history(period="1d")
    if not data.empty:
        return data["Close"].iloc[-1]
    return "Stock symbol not found!"


print(f"AAPL Current Price: ${get_stock_price('AAPL')}")

portfolio = {}

def buy_stock(symbol, quantity, price):
    if symbol in portfolio:
        portfolio[symbol]["quantity"] += quantity
        portfolio[symbol]["total_cost"] += quantity * price
    else:
        portfolio[symbol] = {"quantity": quantity, "total_cost": quantity * price}
    return f"Bought {quantity} shares of {symbol} at ${price} each."

def sell_stock(symbol, quantity):
    if symbol in portfolio and portfolio[symbol]["quantity"] >= quantity:
        portfolio[symbol]["quantity"] -= quantity
        if portfolio[symbol]["quantity"] == 0:
            del portfolio[symbol]
        return f"Sold {quantity} shares of {symbol}."
    return "Not enough shares to sell!"

print(buy_stock("AAPL", 5, get_stock_price("AAPL")))
print(sell_stock("AAPL", 2))
print(portfolio)

def plot_stock(symbol):
    stock = yf.Ticker(symbol)
    data = stock.history(period="1mo")

    plt.figure(figsize=(10, 5))
    plt.plot(data.index, data["Close"], label="Close Price", color="blue")
    plt.xlabel("Date")
    plt.ylabel("Price (USD)")
    plt.title(f"{symbol} Stock Price Trend")
    plt.legend()
    plt.show()


plot_stock("AAPL")
